import openpyxl
import requests
import time
import pandas as pd
from openpyxl import load_workbook
import math
from retrying import retry
# ------------------------
esi_base_url = "https://esi.evetech.net/latest"
# issuedBy is col J a col 10
# file_path = "C:/Users/jwmcn/OneDrive/Eve Current/freightOctober.xlsx"
file_path = "C:/Users/jwmcn/OneDrive/Eve Current/charIntelligenceList.xlsx"
output_txt_file_path = "C:/Users/jwmcn/OneDrive/Eve Current/charIntelligenceOutputLog"
sheet_name = "master"
column_letter = "A"
character_names = ["CCP Zoetrope"]
cname = [ "CCP Zoetrope" ]
character_list = [ "CCP Zoetrope", "Chaunnay Solette" ]
new_file_path = "C:/Users/jwmcn/OneDrive/Eve Current/storage1.xlsx"
ESI_BASE_URL = "https://esi.evetech.net/latest"
CORPORATION_ENDPOINT = "/corporations"
init_data = {}
sep = "#"
# -----------------------------------------

def main():
    rows_to_work = 100
    start_row = 1
    results = flow(rows_to_work, start_row)
    write_to_file(results)


def wait():
    time.sleep(1)
    return

def flow(rows_to_work, start_row):
    current_row = 0
    batch_size = 1000
    strip_list = []
    character_name_list = get_column_data(file_path, sheet_name, column_letter, start_row, batch_size)
    print(character_name_list)
    for name in character_name_list:
        name = str(name)
        name = name.strip()
        strip_list.append(name)
        print(name)
    print(strip_list)

    batch_counter = 0
    start_time = time.time()
    for row in strip_list:
        try:
            batch_counter = batch_counter + 1
            print(batch_counter, "rows")
            print(row)
            character_name = [row]
            character_id = get_character_id(character_name)
            character_id = character_id[1]
            corp_id = get_corp_id(character_id)
            corp_id = [corp_id]
            corp_name = get_corp_name(corp_id)
            corp_id=corp_id[0]
            alliance_id = get_alliance_id_by_corp_id(corp_id)
            alliance_name = get_alliance_name(alliance_id)
            print_line()
            character_string = character_name[0], sep, character_id, sep, corp_name[0], sep,  alliance_name, sep, alliance_id
            character_string = " ".join(str(x) for x in character_string)
            write_to_file(output_txt_file_path, character_string)
            print('wrote to file for character', character_name)
            print(character_string)
            end_time = time.time()
            elapsed_time = end_time - start_time
            print(elapsed_time)
            print((int(elapsed_time)/batch_counter), "is secs per row")

        except Exception as e:
            character_string = "error".join(character_name)
            print("error on", character_name)


@retry(wait_fixed=3, stop_max_attempt_number=5)
def get_column_data(file_path, sheet_name, column_letter, start_row=1, batch_size=1):
    sr = start_row
    last_row = start_row + batch_size
    try:
        workbook = openpyxl.load_workbook(file_path)
        sheet = workbook[sheet_name]
        column_data = []
        for row in sheet.iter_rows(min_row=start_row, max_row=start_row + 1000, values_only=True):  # Assuming header is in the first row
            if row and len(row) >= openpyxl.utils.column_index_from_string(column_letter):
                cell_value = row[openpyxl.utils.column_index_from_string(column_letter) - 1]
                column_data.append(cell_value)
        return column_data
    except Exception as e:
        print(f"An error occurred: {e}")
        return []

@retry(wait_fixed=3, stop_max_attempt_number=5)
def get_character_id(character_name):
    print("getting name")
    print('getting id for ', character_name)
    ids_url = f"{esi_base_url}/universe/ids/"
    response = requests.post(ids_url, json=character_name)
    if response.status_code == 200:
        results = response.json()
        print(results)
        if 'characters' in results:
            for result in results['characters']:
                character_name = result['name']
                character_id = result['id']
    else:
        print(response.status_code)
    return character_name, character_id

@retry(wait_fixed=3, stop_max_attempt_number=5)
def get_corp_id(character_id):
    url = f"https://esi.evetech.net/latest/characters/{character_id}/corporationhistory/"
    response = requests.get(url)
    if response.status_code == 200:
        data = response.json()
        if data:
            entry = data[0]  # Assuming the first entry is the current corporation
            corporation_id = entry['corporation_id']
    else:
        print(response.status_code)
    return corporation_id

@retry(wait_fixed=3, stop_max_attempt_number=5)
def get_corp_name(corp_id):
    ids_url = f"{esi_base_url}/universe/names/"
    try:
        response = requests.post(ids_url, json=corp_id)
        if response.status_code == 200:
            results = response.json()
        else:
            names = "Error: Not found or another error"
    except requests.exceptions.RequestException as e:
       names = f"Error: {str(e)}"
    # ids = [item['id'] for item in results]


    names = [item['name'] for item in results]
    print(names)
    return names

@retry(wait_fixed=3, stop_max_attempt_number=5)
def get_alliance_id_by_corp_id(corp_id):
    base_url = "https://esi.evetech.net/latest"
    # Make a request to get corporation's alliance history
    alliance_history_url = f"{base_url}/corporations/{corp_id}/alliancehistory/"
    # alliance_history_url = 'https://esi.evetech.net/latest/corporations/98728660/alliancehistory/?datasource=tranquility'
    response = requests.get(alliance_history_url)
    if response.status_code == 200:
        stuff = response.json()
        if stuff and isinstance(stuff, list):
            if 'alliance_id' in stuff[0]:
                alliance_id = stuff[0]['alliance_id']
                return alliance_id
            else:
                alliance_id = 'not found or null'
    else:
        print('error')

@retry(wait_fixed=3, stop_max_attempt_number=5)
def get_alliance_name(alliance_id):
    url = f"{ESI_BASE_URL}/alliances/{alliance_id}/"
    try:
        response = requests.get(url)
        if response.status_code == 200:
            alliance_info = response.json()
            return alliance_info.get("name")
        else:
            return "Alliance not found or another error"
    except requests.exceptions.RequestException as e:
        return f"Error: {str(e)}"

def print_line():
    print("XXXXXXXXXXXXXXXX")
    print("XXXXXXXXXXXXXXXX")

def should_retry():
    print(retrying)
    return True

def write_to_file(output_txt_file_path, string):
    with open(output_txt_file_path, 'a+') as file:
        file.write(string + "\n")
    return



flow(10, 10)
